// Configuration File
manifest {
    author = 'Phelelani Mpangase'
    homePage = 'https://github.com/h3abionet/h3ameta'
    description = 'H3ABioNet Metagenomics Workflow'
    mainScript = 'main.nf'
    version = '0.1'
}

params {
    // INPUT/OUTPUT AND ANALYSIS TYPE
    data           = null
    out            = null
    mode           = null
    from           = null
    help           = null
    
    // DATA TYPE
    pairedEnd      = null
    singleEnd      = null
    read_type      = null

    // DATABASES & REQUIRED DATASETS
    genome         = null
    kraken_db      = null
    dataset_table  = null
    decontam_db    = null
    viral_db       = null
    acc_2_tax      = null
    names_dmp      = null
    
    // PARAMETERS
    trim          = null
    readlen       = null
    tax_level     = null
    
    // RESOURCES
    max_memory    = 200.GB
    max_cpus      = 24
    max_time      = 24.h
}

//  FUNCTION TO ENSURE THAT RESOURCE REQUIREMENTS DON'T GO BEYOND A MAXIMUM LIMIT
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// CHECK INPUT AND OUTPUT PATHS
def checkPaths() {
    def bind_dirs = []

    // CHECK DATA INPUT DIR
    if(params.data == null) {
        // DO NOTHING!
    } else{
        data_dir = new File("${params.data}")
        bind_dirs.add("${data_dir}")
    }
    // CHECK DATA OUTPUT DIR
    if(params.out == null) {
        out_dir = new File("$PWD/results_nf-h3ameta")
    } else{
        out_dir = new File("${params.out}")
//        bind_dirs.add("${out_dir}")
    }
    // CHECK KRAKEN2_DB
    if(params.kraken_db == null) {
        // DO NOTHING!
    } else{
        kraken_db = new File("${params.kraken_db}")
        bind_dirs.add(kraken_db)
    }
    // CHECK GENOME
    if(params.genome == null) {
        // DO NOTHING!
    } else{
        genome_dir = new File("${params.genome}").getParent()
        bind_dirs.add("${genome_dir}")
    }
    
    // BIND GENOME AND GENES DIR
    if (bind_dirs.isEmpty()) {
        dirs = " "
    } else{
        dirs = bind_dirs.unique().collect { it -> "-B ${it}"}.join(" ").toString()
    }
    return [ bind_dirs, out_dir ]
}

// SINGULARITY OPTIONS
def singularityOptions() {
    singularity {
        enabled = true
        cacheDir = "$PWD/containers"
        runOptions = "$dirs" + " --cleanenv"
        autoMounts = true
    }
}

// PIPELINE TRACING, VISUALIZATION AND HELP
def pipelineHelp() {
    if(params.help || params.mode == null) {
    } else if(params.mode in ['run.ReadQC','run.ReadTrimming', 'run.StrainComp', 'run.TaxonomicClassification', 'run.ViralDetectLong', 'run.ViralDetectShort']) {
        // trace {
        //     enabled = true
        //     file = "${out_dir}/workflow-tracing/nf-h3ameta_${params.mode}_trace.txt"
        // }
        // timeline {
        //     enabled = true
        //     file = "${out_dir}/workflow-tracing/nf-h3ameta_${params.mode}_timeline.html"
        // }
        // report {
        //     enabled = true
        //     file = "${out_dir}/workflow-tracing/nf-h3ameta_${params.mode}_report.html"
        // }
        // dag {
        //     enabled = true
        //     file = "${out_dir}/workflow-tracing/nf-h3ameta.dot"
        // }
    } else{}
}


// ALL PROCESSESS SETTINGS
process {
    // ALL PROCESSES
    cache = true
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
    scratch = 'false'
    maxForks = 10

    // SPECIAL RESOURCE REQUIREMENTS
    withLabel: 'mini' {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }   
    withLabel: 'midi' {
        cpus = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }        
    }   
    withLabel: 'maxi' {
        cpus = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
    }
    
    // SINGULARITY CONTAINERS
    withName: 'run_FastQC' {
        container = "$PWD/containers/nf-meta-fastqc.sif"
    }
    withName: 'run_MultiQC' {
        container = "$PWD/containers/nf-meta-multiqc.sif"
    }
    withName: 'run_Trimmomatic' {
        container = "$PWD/containers/nf-meta-trimmomatic.sif"
    }
    withName: 'run_RemoveHost2' {
        container = "$PWD/containers/nf-meta-fastqscreen.sif"
    }
     withName:'run_SRST2' {
        container = "$PWD/containers/nf-meta-srst2.sif"
    }
    withName:'run_MetaPhlAn2' {
        container = "$PWD/containers/nf-meta-metaphlan2.sif"
    }
    withName: 'run_CreateBarPlot|run_PairFQ|run_getIdentity|run_RemoveReads|run_FinalReportVDL|run_FinalReportVDS' {
        container = "$PWD/containers/nf-meta-post.sif"
    }
    withName: 'run_BWA|run_Bowtie2VDS|run_Bowtie2|run_MappingsStats' {
        container = "$PWD/containers/nf-meta-aligners.sif"
    }
    withName: 'run_GenerateKrakenDB|run_UpdateTaxonomy|run_GenerateBrackenDB|run_Kraken2SC|run_Kraken2VDL|run_Kraken2VDS|run_BrackenSC|run_KronaSC|run_KronaVDL|run_KronaVDS|run_Minimap2Decontaminate' {
        container = "$PWD/containers/nf-meta-kraken2.sif"
    }
}

// PROFILES AND PROCESS OPTIONS
profiles {
    standard {
        executor = 'local'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
    slurm {
//        includeConfig 'data/config_files/viral_detect_long.conf'
//        includeConfig 'data/config_files/viral_detect_short.conf'
        includeConfig 'data/config_files/strain_comp.conf'
        executor = 'slurm'
        queue = 'batch'
        checkPaths()
        singularityOptions()
        pipelineHelp()
    }
}
