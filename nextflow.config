// Configuration File

manifest {
    author = 'H3ABioNet'
    homePage = 'https://github.com/h3abionet/h3ameta'
    description = 'H3ABioNet Metagenomics Workflow'
    mainScript = 'main.nf'
    version = '0.1'
    defaultBranch = 'phele'
}

includeConfig 'confs/defaults.config'

// CHECK INPUT AND OUTPUT PATHS SO THEY CAN BE BOUND TO SINGULARITY IMAGE
def bind_dirs = []
// 1. data_dir
switch(params.data){
    case[null]:
        break
    default:
        data_dir = new File("${params.data}")
        bind_dirs.add("${data_dir}")
        break
}
// 2. out_dir
switch(params.out){
    case[null]:
        out_dir = new File("$PWD/output")
        break
    default:
        out_dir = new File("${params.out}")
        // bind_dirs.add("${out_dir}")
        break
}
// 3. kraken2_db
switch(params.kraken_db){
    case[null]:
        break
    default:
        kraken_db = new File("${params.kraken_db}")
        bind_dirs.add(kraken_db)
        break
}
// 4. fasta
switch(params.fasta){
    case[null]:
        break
    default:
        fasta_dir = new File("${params.fasta}").getParent()
        bind_dirs.add("${fasta_dir}")
        break
}

// BIND ALL DIRECTORIES
if (bind_dirs.isEmpty()) {
    dirs = " "
} else{
    dirs = bind_dirs.unique().collect { it -> "-B ${it}"}.join(" ").toString()
}

// SINGULARITY OPTIONS - PASS DIRECTORIES ABOVE
singularity {
    enabled = true
    cacheDir = "$PWD/containers"
    runOptions = "$dirs" + " --cleanenv"
    autoMounts = true
}

// PIPELINE TRACING, VISUALIZATION, CONFIGS AND HELP
switch(params.mode) {
    case[null]:
        break
    case['run.ReadQC', 'run.ReadTrimming', 'run.StrainComp', 'run.Classification', 'run.ViralDetectLong', 'run.ViralDetectShort']:
        trace {
            enabled = true
            file = "${out_dir}/workflow-tracing/h3ameta_${params.mode}_trace.txt"
        }
        timeline {
            enabled = true
            file = "${out_dir}/workflow-tracing/h3ameta_${params.mode}_timeline.html"
        }
        report {
            enabled = true
            file = "${out_dir}/workflow-tracing/h3ameta_${params.mode}_report.html"
        }
    default:
        break
}

// FUNCTION TO ENSURE THAT RESOURCE REQUIREMENTS DON'T GO BEYOND A MAXIMUM LIMIT
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
            return params.max_memory as nextflow.util.MemoryUnit
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
            return params.max_time as nextflow.util.Duration
            else
            return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

// ALL PROCESSESS SETTINGS
process {
    // ALL PROCESSES
    cache = true
    stageInMode = 'symlink'
    stageOutMode = 'rsync'
    scratch = 'false'
    maxForks = 10

    // SPECIAL RESOURCE REQUIREMENTS
    withLabel: 'mini' {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time = { check_max( 4.h * task.attempt, 'time' ) }
    }   
    withLabel: 'midi' {
        cpus = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 12.GB * task.attempt, 'memory' ) }
        time = { check_max( 24.h * task.attempt, 'time' ) }        
    }   
    withLabel: 'maxi' {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 48.GB * task.attempt, 'memory' ) }
        time = { check_max( 48.h * task.attempt, 'time' ) }
    }
    
    // SINGULARITY CONTAINERS
    withName: 'run_BWA|run_Bowtie2VDS|run_Bowtie2|run_MappingsStats' {
        container = "$PWD/containers/h3ameta-aligners.sif"
    }
    withName: 'run_FastQC' {
        container = "$PWD/containers/h3ameta-fastqc.sif"
    }
    withName: 'run_MultiQC' {
        container = "$PWD/containers/h3ameta-multiqc.sif"
    }
    withName: 'run_Trimmomatic' {
        container = "$PWD/containers/h3ameta-trimmomatic.sif"
    }
    withName: 'run_RemoveHost2' {
        container = "$PWD/containers/h3ameta-fastqscreen.sif"
    }
     withName:'run_SRST2' {
        container = "$PWD/containers/h3ameta-srst2.sif"
    }
    withName:'run_MetaPhlAn2' {
        container = "$PWD/containers/h3ameta-metaphlan2.sif"
    }
    withName: 'run_CreateBarPlot|run_PairFQ|run_getIdentity|run_RemoveReads|run_FinalReportVDL|run_FinalReportVDS' {
        container = "$PWD/containers/h3ameta-post.sif"
    }
    withName: 'run_GenerateKrakenDB|run_UpdateTaxonomy|run_GenerateBrackenDB|run_Kraken2SC|run_Kraken2VDL|run_Kraken2VDS|run_BrackenSC|run_KronaSC|run_KronaVDL|run_KronaVDS|run_Minimap2Decontaminate' {
        container = "$PWD/containers/h3ameta-kraken2.sif"
    }
}

// PROFILES AND PROCESS OPTIONS
profiles {
    standard {
        executor = 'local'
    }
    slurm {
        executor = 'slurm'
        queue = 'batch'
    }
}
